Index: Source/obj/project.assets.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/obj/project.assets.json	(date 1581959541130)
+++ Source/obj/project.assets.json	(date 1581959541130)
@@ -0,0 +1,143 @@
+{
+  "version": 3,
+  "targets": {
+    ".NETFramework,Version=v4.7.2": {
+      "Lib.Harmony/2.0.0.1": {
+        "type": "package",
+        "frameworkAssemblies": [
+          "System.Runtime.InteropServices.RuntimeInformation"
+        ],
+        "compile": {
+          "lib/net472/0Harmony.dll": {}
+        },
+        "runtime": {
+          "lib/net472/0Harmony.dll": {}
+        }
+      }
+    },
+    ".NETFramework,Version=v4.7.2/win": {
+      "Lib.Harmony/2.0.0.1": {
+        "type": "package",
+        "frameworkAssemblies": [
+          "System.Runtime.InteropServices.RuntimeInformation"
+        ],
+        "compile": {
+          "lib/net472/0Harmony.dll": {}
+        },
+        "runtime": {
+          "lib/net472/0Harmony.dll": {}
+        }
+      }
+    },
+    ".NETFramework,Version=v4.7.2/win-x64": {
+      "Lib.Harmony/2.0.0.1": {
+        "type": "package",
+        "frameworkAssemblies": [
+          "System.Runtime.InteropServices.RuntimeInformation"
+        ],
+        "compile": {
+          "lib/net472/0Harmony.dll": {}
+        },
+        "runtime": {
+          "lib/net472/0Harmony.dll": {}
+        }
+      }
+    },
+    ".NETFramework,Version=v4.7.2/win-x86": {
+      "Lib.Harmony/2.0.0.1": {
+        "type": "package",
+        "frameworkAssemblies": [
+          "System.Runtime.InteropServices.RuntimeInformation"
+        ],
+        "compile": {
+          "lib/net472/0Harmony.dll": {}
+        },
+        "runtime": {
+          "lib/net472/0Harmony.dll": {}
+        }
+      }
+    }
+  },
+  "libraries": {
+    "Lib.Harmony/2.0.0.1": {
+      "sha512": "LFuhfrMR4RZ2+vpm/IpM4SSlOVPQ4shm3I9UusL8WjaWHn+a7fg7njbGqAMyHKIpyAgzPBG4xsLC3EMbXZDbqw==",
+      "type": "package",
+      "path": "lib.harmony/2.0.0.1",
+      "files": [
+        ".signature.p7s",
+        "HarmonyLogo.png",
+        "LICENSE",
+        "lib.harmony.2.0.0.1.nupkg.sha512",
+        "lib.harmony.nuspec",
+        "lib/net35/0Harmony.dll",
+        "lib/net35/0Harmony.xml",
+        "lib/net45/0Harmony.dll",
+        "lib/net45/0Harmony.xml",
+        "lib/net472/0Harmony.dll",
+        "lib/net472/0Harmony.xml",
+        "lib/net48/0Harmony.dll",
+        "lib/net48/0Harmony.xml",
+        "lib/netcoreapp3.0/0Harmony.dll",
+        "lib/netcoreapp3.0/0Harmony.xml",
+        "lib/netcoreapp3.1/0Harmony.dll",
+        "lib/netcoreapp3.1/0Harmony.xml"
+      ]
+    }
+  },
+  "projectFileDependencyGroups": {
+    ".NETFramework,Version=v4.7.2": [
+      "Lib.Harmony >= 2.0.0.1"
+    ]
+  },
+  "packageFolders": {
+    "C:\\Users\\niek1\\.nuget\\packages\\": {}
+  },
+  "project": {
+    "version": "1.0.0",
+    "restore": {
+      "projectUniqueName": "C:\\Program Files (x86)\\Steam\\steamapps\\common\\RimWorld\\Mods\\HumanStoryteller\\Source\\HumanStoryteller.csproj",
+      "projectName": "HumanStoryteller",
+      "projectPath": "C:\\Program Files (x86)\\Steam\\steamapps\\common\\RimWorld\\Mods\\HumanStoryteller\\Source\\HumanStoryteller.csproj",
+      "packagesPath": "C:\\Users\\niek1\\.nuget\\packages\\",
+      "outputPath": "C:\\Program Files (x86)\\Steam\\steamapps\\common\\RimWorld\\Mods\\HumanStoryteller\\Source\\obj\\",
+      "projectStyle": "PackageReference",
+      "configFilePaths": [
+        "C:\\Users\\niek1\\AppData\\Roaming\\NuGet\\NuGet.Config",
+        "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config"
+      ],
+      "originalTargetFrameworks": [
+        "net472"
+      ],
+      "sources": {
+        "C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\": {},
+        "https://api.nuget.org/v3/index.json": {}
+      },
+      "frameworks": {
+        "net472": {
+          "projectReferences": {}
+        }
+      }
+    },
+    "frameworks": {
+      "net472": {
+        "dependencies": {
+          "Lib.Harmony": {
+            "target": "Package",
+            "version": "[2.0.0.1, )"
+          }
+        }
+      }
+    },
+    "runtimes": {
+      "win": {
+        "#import": []
+      },
+      "win-x64": {
+        "#import": []
+      },
+      "win-x86": {
+        "#import": []
+      }
+    }
+  }
+}
\ No newline at end of file
Index: Source/obj/project.packagespec.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/obj/project.packagespec.json	(date 1581959541361)
+++ Source/obj/project.packagespec.json	(date 1581959541361)
@@ -0,0 +1,39 @@
+{
+  "version": "1.0.0",
+  "restore": {
+    "projectUniqueName": "C:\\Program Files (x86)\\Steam\\steamapps\\common\\RimWorld\\Mods\\HumanStoryteller\\Source\\HumanStoryteller.csproj",
+    "projectName": "HumanStoryteller",
+    "projectPath": "C:\\Program Files (x86)\\Steam\\steamapps\\common\\RimWorld\\Mods\\HumanStoryteller\\Source\\HumanStoryteller.csproj",
+    "outputPath": "C:\\Program Files (x86)\\Steam\\steamapps\\common\\RimWorld\\Mods\\HumanStoryteller\\Source\\obj\\",
+    "projectStyle": "PackageReference",
+    "originalTargetFrameworks": [
+      "net472"
+    ],
+    "frameworks": {
+      "net472": {
+        "projectReferences": {}
+      }
+    }
+  },
+  "frameworks": {
+    "net472": {
+      "dependencies": {
+        "Lib.Harmony": {
+          "target": "Package",
+          "version": "[2.0.0.1, )"
+        }
+      }
+    }
+  },
+  "runtimes": {
+    "win": {
+      "#import": []
+    },
+    "win-x64": {
+      "#import": []
+    },
+    "win-x86": {
+      "#import": []
+    }
+  }
+}
\ No newline at end of file
Index: Source/obj/HumanStoryteller.csproj.nuget.cache
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/obj/HumanStoryteller.csproj.nuget.cache	(date 1581959541132)
+++ Source/obj/HumanStoryteller.csproj.nuget.cache	(date 1581959541132)
@@ -0,0 +1,0 @@
Index: Source/obj/HumanStoryteller.csproj.nuget.g.props
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/obj/HumanStoryteller.csproj.nuget.g.props	(date 1581959261855)
+++ Source/obj/HumanStoryteller.csproj.nuget.g.props	(date 1581959261855)
@@ -0,0 +1,0 @@
Index: Source/obj/HumanStoryteller.csproj.nuget.g.targets
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/obj/HumanStoryteller.csproj.nuget.g.targets	(date 1581959261856)
+++ Source/obj/HumanStoryteller.csproj.nuget.g.targets	(date 1581959261856)
@@ -0,0 +1,0 @@
Index: Source/Util/Overlay/StoryOverlay.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Util/Overlay/StoryOverlay.cs	(date 1581965208000)
+++ Source/Util/Overlay/StoryOverlay.cs	(date 1581965208000)
@@ -1,7 +1,7 @@
 using System;
 using System.Collections.Generic;
 using System.Linq;
-using Harmony;
+using HarmonyLib;
 using Verse;
 
 namespace HumanStoryteller.Util.Overlay {
Index: Source/Util/AreaUtil.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Util/AreaUtil.cs	(date 1581965266018)
+++ Source/Util/AreaUtil.cs	(date 1581965266018)
@@ -1,7 +1,7 @@
 using System;
 using System.Collections.Generic;
 using System.Linq;
-using Harmony;
+using HarmonyLib;
 using HumanStoryteller.CheckConditions;
 using HumanStoryteller.Model.Action;
 using HumanStoryteller.Model.Zones;
@@ -114,7 +114,7 @@
             return str.Length <= compStr.Length ? str : compStr;
         }
 
-        private static ZoneThing ItemToZoneThing(Thing thing, bool buildings, bool items, bool pawns, bool plants) {'
+        private static ZoneThing ItemToZoneThing(Thing thing, bool buildings, bool items, bool pawns, bool plants) {
             if (thing is Corpse) {
                 Tell.Warn("Not yet supporting corpses as export");
                 return null;
Index: Source/Util/StoryComponent.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Util/StoryComponent.cs	(date 1581965296201)
+++ Source/Util/StoryComponent.cs	(date 1581965296201)
@@ -1,5 +1,5 @@
 using System.Collections.Generic;
-using Harmony;
+using HarmonyLib;
 using HumanStoryteller.Model;
 using HumanStoryteller.Model.PawnGroup;
 using HumanStoryteller.Model.StoryPart;
Index: Source/Util/ScenarioEditorUtil.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Util/ScenarioEditorUtil.cs	(date 1581965296206)
+++ Source/Util/ScenarioEditorUtil.cs	(date 1581965296206)
@@ -1,6 +1,6 @@
 using System;
 using System.Collections.Generic;
-using Harmony;
+using HarmonyLib;
 using RimWorld;
 
 namespace HumanStoryteller.Util {
Index: Source/Model/Zones/LocationZone.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Model/Zones/LocationZone.cs	(date 1581965296182)
+++ Source/Model/Zones/LocationZone.cs	(date 1581965296182)
@@ -1,5 +1,5 @@
 using System.Collections.Generic;
-using Harmony;
+using HarmonyLib;
 using HumanStoryteller.Util.Logging;
 using Newtonsoft.Json;
 using Verse;
Index: Source/Model/Zones/StructureZone.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Model/Zones/StructureZone.cs	(date 1581964801117)
+++ Source/Model/Zones/StructureZone.cs	(date 1581964801117)
@@ -1,7 +1,6 @@
 using System;
 using System.Collections.Generic;
-using Harmony;
-using HumanStoryteller.Util;
+using HarmonyLib;
 using HumanStoryteller.Util.Logging;
 using Verse;
 
Index: Source/Model/PawnGroup/Filter/KindFilter.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Model/PawnGroup/Filter/KindFilter.cs	(date 1581964758962)
+++ Source/Model/PawnGroup/Filter/KindFilter.cs	(date 1581964758962)
@@ -1,8 +1,6 @@
 using System;
 using System.Collections.Generic;
-using System.Linq;
-using Harmony;
-using RimWorld;
+using HarmonyLib;
 using Verse;
 
 namespace HumanStoryteller.Model.PawnGroup.Filter {
Index: Source/Model/PawnGroup/PawnGroup.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Model/PawnGroup/PawnGroup.cs	(date 1581964766491)
+++ Source/Model/PawnGroup/PawnGroup.cs	(date 1581964766491)
@@ -1,6 +1,6 @@
 using System.Collections.Generic;
 using System.Linq;
-using Harmony;
+using HarmonyLib;
 using Verse;
 
 namespace HumanStoryteller.Model.PawnGroup {
Index: Source/Model/PawnGroup/PawnGroupSelector.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Model/PawnGroup/PawnGroupSelector.cs	(date 1581964784543)
+++ Source/Model/PawnGroup/PawnGroupSelector.cs	(date 1581964784543)
@@ -1,7 +1,7 @@
 using System;
 using System.Collections.Generic;
 using System.Linq;
-using Harmony;
+using HarmonyLib;
 using HumanStoryteller.Util.Logging;
 using Verse;
 
Index: Source/Model/StoryPart/StoryNode.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Model/StoryPart/StoryNode.cs	(date 1581964792669)
+++ Source/Model/StoryPart/StoryNode.cs	(date 1581964792669)
@@ -1,5 +1,5 @@
 using System.Collections.Generic;
-using Harmony;
+using HarmonyLib;
 using HumanStoryteller.CheckConditions;
 using HumanStoryteller.Util.Logging;
 using Verse;
Index: Source/Patch/Map_Patch.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Patch/Map_Patch.cs	(date 1581959799527)
+++ Source/Patch/Map_Patch.cs	(date 1581959799527)
@@ -1,6 +1,6 @@
 using System;
 using System.Reflection;
-using Harmony;
+using HarmonyLib;
 using HumanStoryteller.Util;
 using HumanStoryteller.Util.Logging;
 using RimWorld.Planet;
@@ -8,7 +8,7 @@
 
 namespace HumanStoryteller.Patch {
     public class Map_Patch {
-        public static void Patch(HarmonyInstance harmony) {
+        public static void Patch(Harmony harmony) {
             MethodInfo targetEmpty = AccessTools.Method(typeof(SettleInEmptyTileUtility), "Settle");
             MethodInfo targetExisting = AccessTools.Method(typeof(SettleInExistingMapUtility), "Settle");
             HarmonyMethod patchSettle = new HarmonyMethod(typeof(Map_Patch).GetMethod("Settle"));
Index: Source/Patch/Lord_Patch.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Patch/Lord_Patch.cs	(date 1581959807473)
+++ Source/Patch/Lord_Patch.cs	(date 1581959807473)
@@ -1,12 +1,11 @@
 using System.Reflection;
-using Harmony;
+using HarmonyLib;
 using HumanStoryteller.Helper.IntentHelper;
-using HumanStoryteller.Util;
 using Verse.AI.Group;
 
 namespace HumanStoryteller.Patch {
     public class Lord_Patch {
-        public static void Patch(HarmonyInstance harmony) {
+        public static void Patch(Harmony harmony) {
             MethodInfo target = AccessTools.Method(typeof(Lord), "ReceiveMemo");
             HarmonyMethod pre = new HarmonyMethod(typeof(Lord_Patch).GetMethod("ReceiveMemo"));
             harmony.Patch(target, pre);
Index: Source/Patch/Main_Patch.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Patch/Main_Patch.cs	(date 1581959684374)
+++ Source/Patch/Main_Patch.cs	(date 1581959684374)
@@ -1,7 +1,6 @@
 using System;
 using System.Reflection;
-using Harmony;
-using HumanStoryteller.Util;
+using HarmonyLib;
 using HumanStoryteller.Util.Logging;
 using RimWorld;
 using UnityEngine;
@@ -9,7 +8,7 @@
 
 namespace HumanStoryteller.Patch {
     public class Main_Patch {
-        public static void Patch(HarmonyInstance harmony) {
+        public static void Patch(Harmony harmony) {
             MethodInfo quickstart = AccessTools.Method(typeof(QuickStarter), "CheckQuickStart");
             HarmonyMethod checkQuickstart = new HarmonyMethod(typeof(Main_Patch).GetMethod("CheckQuickStart"));
             harmony.Patch(quickstart, checkQuickstart);
Index: Source/Patch/Shot_Patch.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Patch/Shot_Patch.cs	(date 1581959771746)
+++ Source/Patch/Shot_Patch.cs	(date 1581959771746)
@@ -1,10 +1,9 @@
 using System;
 using System.Collections.Generic;
 using System.Reflection;
-using Harmony;
+using HarmonyLib;
 using HumanStoryteller.Util;
 using HumanStoryteller.Util.Logging;
-using RimWorld.Planet;
 using Verse;
 
 namespace HumanStoryteller.Patch {
@@ -14,7 +13,7 @@
         public Shot_Patch() {
         }
 
-        public static void Patch(HarmonyInstance harmony) {
+        public static void Patch(Harmony harmony) {
             MethodInfo targetTryCastShot = AccessTools.Method(typeof(Verb_LaunchProjectile), "TryCastShot");
             HarmonyMethod patchPreTryCastShot = new HarmonyMethod(typeof(Shot_Patch).GetMethod("TryCastShotPre"));
             HarmonyMethod patchPostTryCastShot = new HarmonyMethod(typeof(Shot_Patch).GetMethod("TryCastShotPost"));
Index: Source/Patch/StoryStatus_Patch.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Patch/StoryStatus_Patch.cs	(date 1581965204035)
+++ Source/Patch/StoryStatus_Patch.cs	(date 1581965204035)
@@ -1,5 +1,5 @@
 using System.Reflection;
-using Harmony;
+using HarmonyLib;
 using RimWorld;
 using RimWorld.Planet;
 using UnityEngine;
@@ -7,7 +7,7 @@
 
 namespace HumanStoryteller.Patch {
     public class StoryStatus_Patch {
-        public static void Patch(HarmonyInstance harmony) {
+        public static void Patch(Harmony harmony) {
             //TODO fix on load when this is enabled
             // Slow motion
             MethodInfo speedMultiplier = AccessTools.Method(typeof(TickManager), "get_TickRateMultiplier");
@@ -123,9 +123,9 @@
             }
 
             if (Event.current != null
-                && Event.current.type != EventType.layout
-                && Event.current.type != EventType.repaint
-                && Event.current.type != EventType.ignore
+                && Event.current.type != EventType.Layout
+                && Event.current.type != EventType.Repaint
+                && Event.current.type != EventType.Ignore
                 && !KeyBindingDefOf.Dev_ToggleDebugLog.KeyDownEvent) {
                 Event.current.Use();
             }
Index: Source/Patch/CreateWorldUI_Patch.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Patch/CreateWorldUI_Patch.cs	(date 1581965482210)
+++ Source/Patch/CreateWorldUI_Patch.cs	(date 1581965482210)
@@ -1,7 +1,7 @@
 using System;
 using System.Linq;
 using System.Reflection;
-using Harmony;
+using HarmonyLib;
 using RimWorld;
 using RimWorld.Planet;
 using UnityEngine;
@@ -9,7 +9,7 @@
 
 namespace HumanStoryteller.Patch {
     public class CreateWorldUI_Patch {
-        public static void Patch(HarmonyInstance harmony) {
+        public static void Patch(Harmony harmony) {
             MethodInfo targetMain = AccessTools.Method(typeof(Page_CreateWorldParams), "DoWindowContents");
 
             HarmonyMethod draw = new HarmonyMethod(typeof(CreateWorldUI_Patch).GetMethod("DoWindowContents"));
@@ -42,6 +42,10 @@
                     Traverse.Create(page).Field("temperature").SetValue(SeverityToTemperature(initParams.Temperature.GetValue()));
                 }
 
+                if (initParams.Population.GetValue() != -1) {
+                    Traverse.Create(page).Field("population").SetValue(SeverityToPopulation(initParams.Population.GetValue()));
+                }
+
                 Widgets.Label(new Rect(rect.x, rect.y + 250, rect.width, 30), "ParametersOverriden".Translate());
 
                 var value = initParams.PawnAmount.GetValue();
@@ -127,5 +131,33 @@
 
             return OverallTemperature.VeryHot;
         }
+
+        public static OverallPopulation SeverityToPopulation(float severity) {
+            if (severity == -1) {
+                return OverallPopulation.Normal;
+            }
+
+            if (severity < 0.2f) {
+                return OverallPopulation.Little;
+            }
+
+            if (severity < 0.4f) {
+                return OverallPopulation.LittleBitLess;
+            }
+
+            if (severity < 0.6f) {
+                return OverallPopulation.Normal;
+            }
+
+            if (severity < 0.8f) {
+                return OverallPopulation.LittleBitMore;
+            }
+
+            if (severity < 1f) {
+                return OverallPopulation.High;
+            }
+
+            return OverallPopulation.VeryHigh;
+        }
     }
 }
\ No newline at end of file
Index: Source/Patch/StorytellerUI_Patch.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Patch/StorytellerUI_Patch.cs	(date 1581959789087)
+++ Source/Patch/StorytellerUI_Patch.cs	(date 1581959789087)
@@ -1,12 +1,9 @@
 using System;
 using System.Collections.Generic;
-using System.Linq;
 using System.Reflection;
 using System.Text.RegularExpressions;
-using Harmony;
-using HumanStoryteller.Model;
+using HarmonyLib;
 using HumanStoryteller.Model.StoryPart;
-using HumanStoryteller.Util;
 using HumanStoryteller.Util.Logging;
 using HumanStoryteller.Web;
 using RimWorld;
@@ -60,7 +57,7 @@
         }
 
 
-        public static void Patch(HarmonyInstance harmony) {
+        public static void Patch(Harmony harmony) {
             MethodInfo targetMain = AccessTools.Method(typeof(StorytellerUI), "DrawStorytellerSelectionInterface");
             MethodInfo targetPre = AccessTools.Method(typeof(Page_SelectStoryteller), "PreOpen");
             MethodInfo targetPost = AccessTools.Method(typeof(Page_SelectStoryteller), "CanDoNext");
Index: Source/Patch/SelectStartingSiteUI_Patch.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Patch/SelectStartingSiteUI_Patch.cs	(date 1581959753944)
+++ Source/Patch/SelectStartingSiteUI_Patch.cs	(date 1581959753944)
@@ -1,13 +1,12 @@
 using System.Reflection;
-using Harmony;
-using HumanStoryteller.Util;
+using HarmonyLib;
 using RimWorld;
 using UnityEngine;
 using Verse;
 
 namespace HumanStoryteller.Patch {
     public class SelectStartingSiteUI_Patch {
-        public static void Patch(HarmonyInstance harmony) {
+        public static void Patch(Harmony harmony) {
             MethodInfo targetMain = AccessTools.Method(typeof(Page_SelectStartingSite), "ExtraOnGUI");
 
             HarmonyMethod draw = new HarmonyMethod(typeof(SelectStartingSiteUI_Patch).GetMethod("ExtraOnGUI"));
Index: Source/Helper/QuestHelper/QuestSitePart.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Helper/QuestHelper/QuestSitePart.cs	(date 1581966273432)
+++ Source/Helper/QuestHelper/QuestSitePart.cs	(date 1581966273432)
@@ -1,6 +1,5 @@
 using System.Collections.Generic;
-using Harmony;
-using RimWorld;
+using HarmonyLib;
 using RimWorld.Planet;
 using Verse;
 
@@ -16,14 +15,13 @@
             parms = null;
             def = new QuestSitePartDef(_names);
         }
-
-        public override SiteCoreOrPartDefBase Def => new QuestSitePartDef(_names);
         
         public override string ToString() {
             return $"Names: [{_names.Join()}]";
         }
         
-        public override void ExposeData() {
+        public new void ExposeData() {
+            base.ExposeData();
             Scribe_Collections.Look(ref _names, "names", LookMode.Value);
             if (Scribe.mode == LoadSaveMode.LoadingVars) {
                 def = new QuestSitePartDef(_names);
Index: Source/Helper/QuestHelper/QuestSitePartDef.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Helper/QuestHelper/QuestSitePartDef.cs	(date 1581966273409)
+++ Source/Helper/QuestHelper/QuestSitePartDef.cs	(date 1581966273409)
@@ -1,5 +1,4 @@
 using System.Collections.Generic;
-using HumanStoryteller.Util;
 using RimWorld;
 
 namespace HumanStoryteller.Helper.QuestHelper {
@@ -12,10 +11,6 @@
             workerClass = typeof(QuestSitePartWorker);
         }
 
-        public new SiteCoreOrPartWorkerBase Worker => new QuestSitePartWorker(_names);
-        
-        protected override SiteCoreOrPartWorkerBase CreateWorker() {
-            return new QuestSitePartWorker(_names);
-        }
+        public new SitePartWorker Worker => new QuestSitePartWorker(_names);
     }
 }
\ No newline at end of file
Index: Source/Incidents/HumanIncidentWorker_Root.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Incidents/HumanIncidentWorker_Root.cs	(date 1581965013676)
+++ Source/Incidents/HumanIncidentWorker_Root.cs	(date 1581965013676)
@@ -25,6 +25,7 @@
         public Number Coverage = new Number();
         public Number Rainfall = new Number();
         public Number Temperature = new Number();
+        public Number Population = new Number();
         public Number Site = new Number();
         public Number MapSize = new Number();
         
@@ -32,7 +33,7 @@
         }
 
         public override string ToString() {
-            return $"{base.ToString()}, OverrideMapGen: [{OverrideMapGen}], OverrideMapLoc: [{OverrideMapLoc}], Seed: [{Seed}], Opening: [{Opening}], StartSeason: [{StartSeason}], PawnAmount: [{PawnAmount}], Coverage: [{Coverage}], Rainfall: [{Rainfall}], Temperature: [{Temperature}], Site: [{Site}], MapSize: [{MapSize}]";
+            return $"{base.ToString()}, OverrideMapGen: [{OverrideMapGen}], OverrideMapLoc: [{OverrideMapLoc}], Seed: [{Seed}], Opening: [{Opening}], StartSeason: [{StartSeason}], PawnAmount: [{PawnAmount}], Coverage: [{Coverage}], Rainfall: [{Rainfall}], Temperature: [{Temperature}], Population: [{Population}], Site: [{Site}], MapSize: [{MapSize}]";
         }
 
         public override void ExposeData() {
@@ -45,6 +46,7 @@
             Scribe_Deep.Look(ref Coverage, "coverage");
             Scribe_Deep.Look(ref Rainfall, "rainfall");
             Scribe_Deep.Look(ref Temperature, "temperature");
+            Scribe_Deep.Look(ref Population, "population");
             Scribe_Deep.Look(ref Site, "site");
             Scribe_Deep.Look(ref MapSize, "mapSize");
         }
Index: Source/Incidents/HumanIncidentWorker_Quest.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Incidents/HumanIncidentWorker_Quest.cs	(date 1581969870008)
+++ Source/Incidents/HumanIncidentWorker_Quest.cs	(date 1581969870008)
@@ -27,14 +27,18 @@
             Tell.Log($"Executing event {Name} with:{allParams}");
 
             Map map = (Map) allParams.GetTarget();
-            
-            SiteCoreDef siteCoreDef = DefDatabase<SiteCoreDef>.GetNamed(allParams.QuestType, false);
-            SitePartDef sitePartDef = DefDatabase<SitePartDef>.GetNamed(allParams.ThreatType, false);
-
+            QuestScriptDefOf.
+            QuestScriptDef siteCoreDef = DefDatabase<QuestScriptDef>.GetNamed(allParams.QuestType, false);
             if (siteCoreDef == null) {
                 siteCoreDef = SiteCoreDefOf.Nothing;
             }
+            
+            QuestUtility.SendLetterQuestAvailable(QuestUtility.GenerateQuestAndMakeAvailable(def.questScriptDef ?? parms.questScriptDef ?? NaturalRandomQuestChooser.ChooseNaturalRandomQuest(parms.points, parms.target), parms.points));
+            
+            SitePartDef sitePartDef = DefDatabase<SitePartDef>.GetNamed(allParams.ThreatType, false);
 
+            
+
             var paramsPoints = allParams.Points.GetValue();
             float points = paramsPoints >= 0
                 ? StorytellerUtility.DefaultSiteThreatPointsNow() * paramsPoints
@@ -61,7 +65,7 @@
 
             TileFinder.TryFindNewSiteTile(out int tile, Mathf.RoundToInt(allParams.MinTileDist.GetValue()),
                 Mathf.RoundToInt(allParams.MaxTileDist.GetValue()), false, true, map.Tile);
-            Site site = SiteMaker.MakeSite(siteCoreDef, sitePartDef, tile, enemy, true, points);
+            Site site = SiteMaker.MakeSite(sitePartDef, tile, enemy, true, points);
             site.sitePartsKnown = true;
             if (allParams.KillReward) {
                 List<Thing> list = allParams.RewardItem.GetThings(true) ?? GenerateRewards(SiteTuning.BanditCampQuestRewardMarketValueRange, points);
Index: Source/Incidents/HumanIncidentWorker_Rules.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Incidents/HumanIncidentWorker_Rules.cs	(date 1581964470606)
+++ Source/Incidents/HumanIncidentWorker_Rules.cs	(date 1581964470606)
@@ -1,6 +1,6 @@
 using System;
 using System.Collections.Generic;
-using Harmony;
+using HarmonyLib;
 using HumanStoryteller.Model;
 using HumanStoryteller.Model.StoryPart;
 using HumanStoryteller.Util;
Index: Source/Incidents/HumanIncidentWorker_Eclipse.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Incidents/HumanIncidentWorker_Eclipse.cs	(date 1581963202155)
+++ Source/Incidents/HumanIncidentWorker_Eclipse.cs	(date 1581963202155)
@@ -29,8 +29,8 @@
             int duration = Mathf.RoundToInt(allParamsDuration != -1
                 ? allParamsDuration * 60000f
                 : def.durationDays.RandomInRange * 60000f);
-            GameCondition_Eclipse gameCondition_Eclipse =
-                (GameCondition_Eclipse) GameConditionMaker.MakeCondition(GameConditionDefOf.Eclipse, duration);
+            GameCondition_NoSunlight gameCondition_Eclipse =
+                (GameCondition_NoSunlight) GameConditionMaker.MakeCondition(GameConditionDefOf.Eclipse, duration);
             map.gameConditionManager.RegisterCondition(gameCondition_Eclipse);
             SendLetter(allParams, def.letterLabel, def.letterText, def.letterDef, null);
             return ir;
Index: Source/Incidents/HumanIncidentWorker_EditPawn.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Incidents/HumanIncidentWorker_EditPawn.cs	(date 1581966273424)
+++ Source/Incidents/HumanIncidentWorker_EditPawn.cs	(date 1581966273424)
@@ -1,7 +1,5 @@
 using System;
 using System.Collections.Generic;
-using System.Globalization;
-using Harmony;
 using HumanStoryteller.Model;
 using HumanStoryteller.Model.PawnGroup;
 using HumanStoryteller.Model.StoryPart;
@@ -137,7 +135,7 @@
 
                             pawn.equipment.AddEquipment(thing);
                         } else {
-                            pawn.inventory.innerContainer.Add(thing);
+                            pawn.inventory.innerContainer.TryAdd(thing);
                         }
                     } catch (Exception e) {
                         Tell.Warn(
Index: Source/Incidents/HumanIncidentWorker_PlayAudio.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Incidents/HumanIncidentWorker_PlayAudio.cs	(date 1581963884693)
+++ Source/Incidents/HumanIncidentWorker_PlayAudio.cs	(date 1581963884693)
@@ -236,7 +236,6 @@
                 label = "Audio by " + allParams.Author,
                 debugRandomId = 7759,
                 description = "Audio by " + allParams.Author,
-                defPackage = o.defPackage,
                 generated = o.generated,
                 index = o.index,
                 modExtensions = o.modExtensions,
@@ -293,7 +292,6 @@
                 clipPath = filePath,
                 debugRandomId = 7759,
                 description = "Audio by " + allParams.Author,
-                defPackage = o.defPackage,
                 commonality = 0,
                 generated = o.generated,
                 index = 7759,
Index: Source/Incidents/HumanIncidentWorker_RaidEnemy.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Incidents/HumanIncidentWorker_RaidEnemy.cs	(date 1581963969876)
+++ Source/Incidents/HumanIncidentWorker_RaidEnemy.cs	(date 1581963969876)
@@ -126,9 +126,10 @@
                 stringBuilder.AppendLine(p.KindLabel + " - " + str);
             }
 
-            string letterText = GetLetterText(fakeParms, list);
-            PawnRelationUtility.Notify_PawnsSeenByPlayer_Letter(list, ref strategy.letterLabelEnemy, ref letterText,
-                "LetterRelatedPawnsRaidEnemy".Translate(Faction.OfPlayer.def.pawnsPlural, faction.def.pawnsPlural), true);
+            TaggedString letterText = GetLetterText(fakeParms, list);
+            TaggedString labelEnemy = strategy.letterLabelEnemy;
+            PawnRelationUtility.Notify_PawnsSeenByPlayer_Letter(list, ref labelEnemy, ref letterText,
+                "LetterRelatedPawnsRaidEnemy".Translate(Faction.OfPlayer.def.pawnsPlural, faction.def.pawnsPlural), false, true);
             List<TargetInfo> list2 = new List<TargetInfo>();
             if (fakeParms.pawnGroups != null) {
                 List<List<Pawn>> list3 = IncidentParmsUtility.SplitIntoGroups(list, fakeParms.pawnGroups);
Index: Source/Incidents/HumanIncidentWorker_RenameMap.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Incidents/HumanIncidentWorker_RenameMap.cs	(date 1581964470613)
+++ Source/Incidents/HumanIncidentWorker_RenameMap.cs	(date 1581964470613)
@@ -1,13 +1,8 @@
 using System;
-using Harmony;
 using HumanStoryteller.Model;
 using HumanStoryteller.Model.StoryPart;
 using HumanStoryteller.Util;
 using HumanStoryteller.Util.Logging;
-using HumanStoryteller.Util.Overlay;
-using RimWorld;
-using RimWorld.Planet;
-using UnityEngine;
 using Verse;
 
 namespace HumanStoryteller.Incidents {
Index: Source/Incidents/HumanIncidentWorker_CreatePawn.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Incidents/HumanIncidentWorker_CreatePawn.cs	(date 1581962903359)
+++ Source/Incidents/HumanIncidentWorker_CreatePawn.cs	(date 1581962903359)
@@ -75,7 +75,7 @@
                 allParams.NewBorn,
                 false, false, true,
                 allParams.MustBeCapableOfViolence,
-                1F, true, true, true, false, false, false, false, null, null, null,
+                1F, false, true, true, false, false, false, false, false, 0F, null, 1F, null, null, null, null, null,
                 biologicalAge == -1 ? new float?() : biologicalAge,
                 chronologicalAge == -1 ? new float?() : chronologicalAge,
                 allParams.Gender == "" || PawnUtil.GetGender(allParams.Gender) == Gender.None ? new Gender?() : PawnUtil.GetGender(allParams.Gender)
Index: Source/Incidents/HumanIncidentWorker_IntentGiver.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Incidents/HumanIncidentWorker_IntentGiver.cs	(date 1581969870002)
+++ Source/Incidents/HumanIncidentWorker_IntentGiver.cs	(date 1581969870002)
@@ -122,7 +122,9 @@
 
                     return new LordJob_PrisonBreak(groupUpLoc, spot, Rand.Value < 0.5f ? list[0].thingIDNumber : -1);
                 case "DefendAndExpandHive":
-                    return new LordJob_DefendAndExpandHive(true);
+                    var pawnParams = new SpawnedPawnParams();
+                    pawnParams.aggressive = true;
+                    return new LordJob_DefendAndExpandHive(pawnParams);
                 case "StageThenAttack":
                     IntVec3 entrySpot1 = list[0].PositionHeld;
                     IntVec3 stageLoc1 = RCellFinder.FindSiegePositionFrom(entrySpot1, map);
@@ -138,12 +140,12 @@
 
                     return new LordJob_Siege(list[0].Faction, stageLoc2, num);
                 case "Joinable_Party":
-                    if (!RCellFinder.TryFindPartySpot(list[0], out IntVec3 result1)) {
+                    if (!RCellFinder.TryFindGatheringSpot(list[0], GatheringDefOf.Party, out IntVec3 result1)) {
                         Tell.Warn("Didn't find party spot.");
                         return null;
                     }
 
-                    return new LordJob_Joinable_Party(result1, list[0]);
+                    return new LordJob_Joinable_Party(result1, list[0], GatheringDefOf.Party);
                 case "Kidnap":
                     return new LordJob_Kidnap();
                 case "AssaultColony":
@@ -160,7 +162,7 @@
                     RCellFinder.TryFindRandomSpotJustOutsideColony(list[0], out IntVec3 result5);
                     return new LordJob_TradeWithColony(list[0].Faction, result5);
                 case "SleepThenAssaultColony":
-                    return new LordJob_SleepThenAssaultColony(list[0].Faction, true);
+                    return new LordJob_SleepThenAssaultColony(list[0].Faction);
                 case "TravelAndExit":
                     return new LordJob_TravelAndExit(allParams.Location.GetSingleCell(map));
                 case "Travel":
@@ -185,9 +187,9 @@
                         return null;
                     }
 
-                    return new Job(JobDefOf.Hunt, p1);
+                    return JobMaker.MakeJob(JobDefOf.Hunt, p1);
                 case "Wait":
-                    return new Job(JobDefOf.Wait);
+                    return JobMaker.MakeJob(JobDefOf.Wait);
                 case "AttackMelee":
                     var p2 = PawnUtil.GetPawnByName(allParams.FirstStringParam);
 
@@ -196,7 +198,7 @@
                         return null;
                     }
 
-                    return new Job(JobDefOf.AttackMelee, p2);
+                    return JobMaker.MakeJob(JobDefOf.AttackMelee, p2);
                 case "AttackStatic":
                     var p3 = PawnUtil.GetPawnByName(allParams.FirstStringParam);
 
@@ -205,7 +207,7 @@
                         return null;
                     }
 
-                    return new Job(JobDefOf.AttackStatic, p3);
+                    return JobMaker.MakeJob(JobDefOf.AttackStatic, p3);
                 case "Follow":
                     var p4 = PawnUtil.GetPawnByName(allParams.FirstStringParam);
 
@@ -214,7 +216,7 @@
                         return null;
                     }
 
-                    return new Job(JobDefOf.Follow, p4);
+                    return JobMaker.MakeJob(JobDefOf.Follow, p4);
                 case "FollowClose":
                     var p5 = PawnUtil.GetPawnByName(allParams.FirstStringParam);
 
@@ -223,7 +225,7 @@
                         return null;
                     }
 
-                    var job = new Job(JobDefOf.FollowClose, p5);
+                    var job = JobMaker.MakeJob(JobDefOf.FollowClose, p5);
                     job.followRadius = 3f;
                     return job;
                 case "Strip":
@@ -234,7 +236,7 @@
                         return null;
                     }
 
-                    return new Job(JobDefOf.Strip, p6);
+                    return JobMaker.MakeJob(JobDefOf.Strip, p6);
                 case "TradeWithPawn":
                     var p7 = PawnUtil.GetPawnByName(allParams.FirstStringParam);
 
@@ -243,7 +245,7 @@
                         return null;
                     }
 
-                    return new Job(JobDefOf.TradeWithPawn, p7);
+                    return JobMaker.MakeJob(JobDefOf.TradeWithPawn, p7);
                 case "SocialFight":
                     var p8 = PawnUtil.GetPawnByName(allParams.FirstStringParam);
 
@@ -256,7 +258,7 @@
                         return null;
                     }
 
-                    var job2 = new Job(JobDefOf.SocialFight, p8);
+                    var job2 = JobMaker.MakeJob(JobDefOf.SocialFight, p8);
                     job2.verbToUse = verb;
                     return job2;
                 case "Insult":
@@ -267,7 +269,7 @@
                         return null;
                     }
 
-                    return new Job(JobDefOf.Insult, p9);
+                    return JobMaker.MakeJob(JobDefOf.Insult, p9);
                 case "Ignite":
                     var p10 = PawnUtil.GetPawnByName(allParams.FirstStringParam);
 
@@ -276,9 +278,9 @@
                         return null;
                     }
 
-                    return new Job(JobDefOf.Ignite, p10);
+                    return JobMaker.MakeJob(JobDefOf.Ignite, p10);
                 case "LayDown":
-                    return new Job(JobDefOf.LayDown, new LocalTargetInfo(new IntVec3(-1, -2, -3)));
+                    return JobMaker.MakeJob(JobDefOf.LayDown, new LocalTargetInfo(new IntVec3(-1, -2, -3)));
                 case "Rescue":
                     var p12 = PawnUtil.GetPawnByName(allParams.FirstStringParam);
 
@@ -293,7 +295,7 @@
                         return null;
                     }
 
-                    Job job3 = new Job(JobDefOf.Rescue, p12, buildingBed);
+                    Job job3 = JobMaker.MakeJob(JobDefOf.Rescue, p12, buildingBed);
                     job3.count = 1;
                     return job3;
                 case "Capture":
@@ -310,7 +312,7 @@
                         return null;
                     }
 
-                    Job job4 = new Job(JobDefOf.Capture, p13, buildingBed2);
+                    Job job4 = JobMaker.MakeJob(JobDefOf.Capture, p13, buildingBed2);
                     job4.count = 1;
                     return job4;
                 case "ReleasePrisoner":
@@ -325,7 +327,7 @@
                         return null;
                     }
 
-                    Job job5 = new Job(JobDefOf.ReleasePrisoner, p14, result);
+                    Job job5 = JobMaker.MakeJob(JobDefOf.ReleasePrisoner, p14, result);
                     job5.count = 1;
                     return job5;
                 case "Kidnap":
@@ -340,7 +342,7 @@
                         return null;
                     }
 
-                    Job job6 = new Job(JobDefOf.Kidnap, p15, spot);
+                    Job job6 = JobMaker.MakeJob(JobDefOf.Kidnap, p15, spot);
                     job6.count = 1;
                     return job6;
                 case "PrisonerExecution":
@@ -351,7 +353,7 @@
                         return null;
                     }
 
-                    return new Job(JobDefOf.PrisonerExecution, p16);
+                    return JobMaker.MakeJob(JobDefOf.PrisonerExecution, p16);
                 case "Slaughter":
                     var p17 = PawnUtil.GetPawnByName(allParams.FirstStringParam);
 
@@ -360,11 +362,11 @@
                         return null;
                     }
 
-                    return new Job(JobDefOf.Slaughter, p17);
+                    return JobMaker.MakeJob(JobDefOf.Slaughter, p17);
                 case "Vomit":
-                    return new Job(JobDefOf.Vomit);
+                    return JobMaker.MakeJob(JobDefOf.Vomit);
                 case "UnloadYourInventory":
-                    return new Job(JobDefOf.UnloadYourInventory);
+                    return JobMaker.MakeJob(JobDefOf.UnloadYourInventory);
                 default:
                     Tell.Warn("Didn't resolve intent type (job).");
                     return null;
Index: Source/Incidents/HumanIncidentWorker_ShortCircuit.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Incidents/HumanIncidentWorker_ShortCircuit.cs	(date 1581964710993)
+++ Source/Incidents/HumanIncidentWorker_ShortCircuit.cs	(date 1581964710993)
@@ -44,8 +44,8 @@
                 flag = TryStartFireNear(culprit);
             }
 
-            string value = culprit.def != ThingDefOf.PowerConduit
-                ? Find.ActiveLanguageWorker.WithIndefiniteArticlePostProcessed(culprit.Label)
+            TaggedString value = culprit.def != ThingDefOf.PowerConduit
+                ? (TaggedString) Find.ActiveLanguageWorker.WithIndefiniteArticlePostProcessed(culprit.Label)
                 : "AnElectricalConduit".Translate();
             StringBuilder stringBuilder = new StringBuilder();
             if (flag) {
Index: Source/Incidents/HumanIncidentWorker_VisitorGroup.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Incidents/HumanIncidentWorker_VisitorGroup.cs	(date 1581964722406)
+++ Source/Incidents/HumanIncidentWorker_VisitorGroup.cs	(date 1581964722406)
@@ -53,20 +53,20 @@
             LordMaker.MakeNewLord(factionResult, lordJob, map, list);
 
             Pawn pawn = list.Find(x => factionResult.leader == x);
-            string letterLabel;
-            string letterText;
+            TaggedString letterLabel;
+            TaggedString letterText;
             if (list.Count == 1) {
-                string value = string.Empty;
-                string value2 = pawn == null
-                    ? string.Empty
+                TaggedString value = string.Empty;
+                TaggedString value2 = pawn == null
+                    ? (TaggedString) string.Empty
                     : "\n\n" + "SingleVisitorArrivesLeaderInfo".Translate(list[0].Named("PAWN")).AdjustedFor(list[0]);
                 letterLabel = "LetterLabelSingleVisitorArrives".Translate();
                 letterText = "SingleVisitorArrives"
                     .Translate(list[0].story.Title, factionResult.Name, list[0].Name.ToStringFull, value, value2, list[0].Named("PAWN"))
                     .AdjustedFor(list[0]);
             } else {
-                string value3 = string.Empty;
-                string value4 = pawn == null ? string.Empty : "\n\n" + "GroupVisitorsArriveLeaderInfo".Translate(pawn.LabelShort, pawn);
+                TaggedString value3 = string.Empty;
+                TaggedString value4 = pawn == null ? (TaggedString) string.Empty : "\n\n" + "GroupVisitorsArriveLeaderInfo".Translate(pawn.LabelShort, pawn);
                 letterLabel = "LetterLabelGroupVisitorsArrive".Translate();
                 letterText = "GroupVisitorsArrive".Translate(factionResult.Name, value3, value4);
             }
Index: Source/Incidents/HumanIncidentWorker_ControlCamera.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Incidents/HumanIncidentWorker_ControlCamera.cs	(date 1581962903349)
+++ Source/Incidents/HumanIncidentWorker_ControlCamera.cs	(date 1581962903349)
@@ -1,11 +1,9 @@
 using System;
-using Harmony;
+using HarmonyLib;
 using HumanStoryteller.Model;
 using HumanStoryteller.Model.StoryPart;
 using HumanStoryteller.Util;
 using HumanStoryteller.Util.Logging;
-using HumanStoryteller.Util.Overlay;
-using RimWorld;
 using RimWorld.Planet;
 using UnityEngine;
 using Verse;
Index: Source/Incidents/HumanIncidentWorker_HerdMigration.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Incidents/HumanIncidentWorker_HerdMigration.cs	(date 1581963202150)
+++ Source/Incidents/HumanIncidentWorker_HerdMigration.cs	(date 1581963202150)
@@ -103,9 +103,7 @@
         private List<Pawn> GenerateAnimals(PawnKindDef animalKind, int animalsCount, int tile) {
             List<Pawn> list = new List<Pawn>();
             for (int i = 0; i < animalsCount; i++) {
-                PawnGenerationRequest request = new PawnGenerationRequest(animalKind, null, PawnGenerationContext.NonPlayer, tile, false, false,
-                    false, false, true, false, 1f, false, true, true, false, false, false, false, null, null, null, null, null, null, null);
-                Pawn item = PawnGenerator.GeneratePawn(request);
+                Pawn item = PawnGenerator.GeneratePawn(new PawnGenerationRequest(animalKind, null, PawnGenerationContext.NonPlayer, tile));
                 list.Add(item);
             }
 
Index: Source/Incidents/HumanIncidentWorker_PsychicSoothe.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Incidents/HumanIncidentWorker_PsychicSoothe.cs	(date 1581963884708)
+++ Source/Incidents/HumanIncidentWorker_PsychicSoothe.cs	(date 1581963884708)
@@ -29,7 +29,7 @@
                 ? paramsDuration * 60000f
                 : IncidentDef.Named("PsychicSoothe").durationDays.RandomInRange * 60000f);
             GameCondition_PsychicEmanation gameCondition_PsychicEmanation =
-                (GameCondition_PsychicEmanation) GameConditionMaker.MakeCondition(GameConditionDefOf.PsychicSoothe, duration, 0);
+                (GameCondition_PsychicEmanation) GameConditionMaker.MakeCondition(GameConditionDefOf.PsychicSoothe, duration);
 
             Gender g = PawnUtil.GetGender(allParams.Gender);
 
Index: Source/Incidents/HumanIncidentWorker_RefugeeChased.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Incidents/HumanIncidentWorker_RefugeeChased.cs	(date 1581963969870)
+++ Source/Incidents/HumanIncidentWorker_RefugeeChased.cs	(date 1581963969870)
@@ -59,13 +59,13 @@
             defaultPawnGroupMakerParms.points = IncidentWorker_Raid.AdjustedRaidPoints(defaultPawnGroupMakerParms.points, raidParms.raidArrivalMode,
                 raidParms.raidStrategy, defaultPawnGroupMakerParms.faction, PawnGroupKindDefOf.Combat);
             IEnumerable<PawnKindDef> pawnKinds = PawnGroupMakerUtility.GeneratePawnKindsExample(defaultPawnGroupMakerParms);
-            PawnGenerationRequest request = new PawnGenerationRequest(PawnKindDefOf.SpaceRefugee, null, PawnGenerationContext.NonPlayer, -1, false,
-                false, false, false, true, false, 20f, false, true, true, false, false, false, false, null, null, null, null, null, null, null);
-            Pawn refugee = PawnGenerator.GeneratePawn(request);
+            Pawn refugee = PawnGenerator.GeneratePawn(new PawnGenerationRequest(PawnKindDefOf.SpaceRefugee,
+                DownedRefugeeQuestUtility.GetRandomFactionForRefugee(), PawnGenerationContext.NonPlayer, -1, false, false, false, false, true, false,
+                20f));
             refugee.relations.everSeenByPlayer = true;
             PawnUtil.SavePawnByName(allParams.OutName, refugee);
 
-            string text = "RefugeeChasedInitial".Translate(refugee.Name.ToStringFull, refugee.story.Title, enemyFac.def.pawnsPlural, enemyFac.Name,
+            TaggedString text = "RefugeeChasedInitial".Translate(refugee.Name.ToStringFull, refugee.story.Title, enemyFac.def.pawnsPlural, enemyFac.Name,
                 refugee.ageTracker.AgeBiologicalYears, PawnUtility.PawnKindsToCommaList(pawnKinds, true), refugee.Named("PAWN"));
             text = text.AdjustedFor(refugee);
             PawnRelationUtility.TryAppendRelationsWithColonistsInfo(ref text, refugee);
@@ -75,6 +75,7 @@
                 if (parms.Letter.Shake) {
                     Find.CameraDriver.shaker.DoShake(4f);
                 }
+
                 title = parms.Letter.Title.Get();
                 text = parms.Letter.Message.Get();
             }
Index: Source/Incidents/HumanIncidentWorker_ShipPartCrash.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Incidents/HumanIncidentWorker_ShipPartCrash.cs	(date 1581964703263)
+++ Source/Incidents/HumanIncidentWorker_ShipPartCrash.cs	(date 1581964703263)
@@ -1,12 +1,13 @@
 using System;
 using System.Collections.Generic;
+using System.Linq;
 using HumanStoryteller.Model;
 using HumanStoryteller.Model.StoryPart;
-using HumanStoryteller.Util;
 using HumanStoryteller.Util.Logging;
 using RimWorld;
 using UnityEngine;
 using Verse;
+using Verse.AI.Group;
 
 namespace HumanStoryteller.Incidents {
     class HumanIncidentWorker_ShipPartCrash : HumanIncidentWorker {
@@ -25,43 +26,54 @@
 
             Map map = (Map) allParams.GetTarget();
 
-            ThingDef part;
+            ThingDef shipPartDef;
             if (allParams.ShipCrashedPart != "") {
-                part = ThingDef.Named(allParams.ShipCrashedPart);
+                shipPartDef = ThingDef.Named(allParams.ShipCrashedPart);
             } else {
-                part = ThingDefOf.CrashedPsychicEmanatorShipPart;
+                shipPartDef = ThingDefOf.MechCapsule;
             }
-
-            var amount = allParams.Amount.GetValue();
-            int countToSpawn = Mathf.RoundToInt(amount);
 
             List<TargetInfo> list = new List<TargetInfo>();
-            float shrapnelDirection = Rand.Range(0f, 360f);
-            for (int i = 0; i < countToSpawn; i++) {
-                if (!CellFinderLoose.TryFindSkyfallerCell(
-                    part == ThingDefOf.ShipChunk ? ThingDefOf.ShipChunkIncoming : ThingDefOf.CrashedShipPartIncoming, map, out var cell, 14,
-                    default(IntVec3), -1, false, true, true, true)) {
-                    break;
+            IntVec3 intVec = MechClusterUtility.FindDropPodLocation(map, delegate(IntVec3 spot)
+            {
+                if (!spot.Fogged(map) && GenConstruct.CanBuildOnTerrain(shipPartDef, spot, map, Rot4.North))
+                {
+                    return GenConstruct.CanBuildOnTerrain(shipPartDef, new IntVec3(spot.x - Mathf.CeilToInt((float)shipPartDef.size.x / 2f), spot.y, spot.z), map, Rot4.North);
                 }
-
-                if (part == ThingDefOf.ShipChunk) {
-                    SkyfallerMaker.SpawnSkyfaller(ThingDefOf.ShipChunkIncoming, ThingDefOf.ShipChunk, cell, map);
-                } else {
-                    Building_CrashedShipPart building_CrashedShipPart = (Building_CrashedShipPart) ThingMaker.MakeThing(part);
-                    building_CrashedShipPart.SetFaction(Faction.OfMechanoids);
-                    building_CrashedShipPart.GetComp<CompSpawnerMechanoidsOnDamaged>().pointsLeft =
-                        Mathf.Max(StorytellerUtility.DefaultThreatPointsNow(map) * 0.9f, 300f);
-                    Skyfaller skyfaller = SkyfallerMaker.MakeSkyfaller(ThingDefOf.CrashedShipPartIncoming, building_CrashedShipPart);
-                    skyfaller.shrapnelDirection = shrapnelDirection;
-                    GenSpawn.Spawn(skyfaller, cell, map);
-                }
-                list.Add(new TargetInfo(cell, map));
+                return false;
+            });
+            if (intVec == IntVec3.Invalid)
+            {
+                Tell.Warn("ShipPartCrash is trying to use a invalid location");
+            }
+            float points = Mathf.Max(StorytellerUtility.DefaultThreatPointsNow(map) * 0.9f, 300f);
+            List<Pawn> list2 = PawnGroupMakerUtility.GeneratePawns(new PawnGroupMakerParms
+            {
+                groupKind = PawnGroupKindDefOf.Combat,
+                tile = map.Tile,
+                faction = Faction.OfMechanoids,
+                points = points
+            }).ToList();
+            Thing thing = ThingMaker.MakeThing(shipPartDef);
+            thing.SetFaction(Faction.OfMechanoids);
+            LordMaker.MakeNewLord(Faction.OfMechanoids, new LordJob_SleepThenMechanoidsDefend(new List<Thing>
+            {
+                thing
+            }, Faction.OfMechanoids, 28f, intVec, false, false), map, list2);
+            DropPodUtility.DropThingsNear(intVec, map, list2);
+            foreach (Pawn item in list2)
+            {
+                item.TryGetComp<CompCanBeDormant>()?.ToSleep();
             }
+            list.AddRange(from p in list2
+                select new TargetInfo(p));
+            GenSpawn.Spawn(SkyfallerMaker.MakeSkyfaller(ThingDefOf.CrashedShipPartIncoming, thing), intVec, map);
+            list.Add(new TargetInfo(intVec, map));
 
-            if (part == ThingDefOf.ShipChunk) {
+            if (shipPartDef == ThingDefOf.ShipChunk) {
                 SendLetter(allParams, ThingDefOf.ShipChunk.label, "MessageShipChunkDrop".Translate(), LetterDefOf.PositiveEvent, list);
             } else {
-                SendLetter(allParams, part.label, part.description, LetterDefOf.ThreatSmall, list);
+                SendLetter(allParams, shipPartDef.label, shipPartDef.description, LetterDefOf.ThreatSmall, list);
             }
 
             return ir;
Index: Source/Incidents/HumanIncidentWorker_TraderArrival.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Incidents/HumanIncidentWorker_TraderArrival.cs	(date 1581964719306)
+++ Source/Incidents/HumanIncidentWorker_TraderArrival.cs	(date 1581964719306)
@@ -87,8 +87,8 @@
                     }
                 }
 
-                string letterLabel = "LetterLabelTraderCaravanArrival".Translate(factionResult.Name, kindDef.label).CapitalizeFirst();
-                string letterText = "LetterTraderCaravanArrival".Translate(factionResult.Name, kindDef.label).CapitalizeFirst();
+                TaggedString letterLabel = "LetterLabelTraderCaravanArrival".Translate(factionResult.Name, kindDef.label).CapitalizeFirst();
+                TaggedString letterText = "LetterTraderCaravanArrival".Translate(factionResult.Name, kindDef.label).CapitalizeFirst();
                 PawnRelationUtility.Notify_PawnsSeenByPlayer_Letter(list, ref letterLabel, ref letterText,
                     "LetterRelatedPawnsNeutralGroup".Translate(Faction.OfPlayer.def.pawnsPlural), true);
                 SendLetter(allParams, letterLabel, letterText, LetterDefOf.PositiveEvent, list[0], factionResult);
Index: Source/Incidents/HumanIncidentWorker_RefugeePodCrash.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Incidents/HumanIncidentWorker_RefugeePodCrash.cs	(date 1581964470592)
+++ Source/Incidents/HumanIncidentWorker_RefugeePodCrash.cs	(date 1581964470592)
@@ -36,8 +36,8 @@
             PawnUtil.SetDisplayName(pawn, allParams.FirstName, allParams.NickName, allParams.LastName);
             
             pawn.guest.getRescuedThoughtOnUndownedBecauseOfPlayer = true;
-            string title = "LetterLabelRefugeePodCrash".Translate();
-            string text = "RefugeePodCrash".Translate(pawn.Named("PAWN")).AdjustedFor(pawn);
+            TaggedString title = "LetterLabelRefugeePodCrash".Translate();
+            TaggedString text = "RefugeePodCrash".Translate(pawn.Named("PAWN")).AdjustedFor(pawn);
             text += "\n\n";
             text = pawn.Faction == null
                 ? text + "RefugeePodCrash_Factionless".Translate(pawn.Named("PAWN")).AdjustedFor(pawn)
Index: Source/Incidents/HumanIncidentWorker_WildManWandersIn.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/Incidents/HumanIncidentWorker_WildManWandersIn.cs	(date 1581964729207)
+++ Source/Incidents/HumanIncidentWorker_WildManWandersIn.cs	(date 1581964729207)
@@ -42,8 +42,8 @@
             }
             GenSpawn.Spawn(pawn, cell, map);
             IncidentDef def = IncidentDef.Named("WildManWandersIn");
-            string title = def.letterLabel.Formatted(pawn.LabelShort, pawn.Named("PAWN"));
-            string text = def.letterText.Formatted(pawn.LabelShort, pawn.Named("PAWN")).AdjustedFor(pawn).CapitalizeFirst();
+            TaggedString title = def.letterLabel.Formatted(pawn.LabelShort, pawn.Named("PAWN"));
+            TaggedString text = def.letterText.Formatted(pawn.LabelShort, pawn.Named("PAWN")).AdjustedFor(pawn).CapitalizeFirst();
             PawnRelationUtility.TryAppendRelationsWithColonistsInfo(ref text, ref title, pawn);
             SendLetter(allParams, title, text, def.letterDef, pawn);
             
Index: Source/StoryQueue.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/StoryQueue.cs	(date 1581965296211)
+++ Source/StoryQueue.cs	(date 1581965296211)
@@ -1,7 +1,6 @@
 using System.Collections.Generic;
-using Harmony;
+using HarmonyLib;
 using HumanStoryteller.Model.Action;
-using HumanStoryteller.Util;
 using Verse;
 
 namespace HumanStoryteller {
Index: Source/CheckConditions/TimeCheck.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/CheckConditions/TimeCheck.cs	(date 1581962658857)
+++ Source/CheckConditions/TimeCheck.cs	(date 1581962658857)
@@ -1,6 +1,6 @@
 using System;
 using System.Collections.Generic;
-using Harmony;
+using HarmonyLib;
 using HumanStoryteller.Incidents;
 using HumanStoryteller.Util.Logging;
 using RimWorld;
Index: Source/CheckConditions/BiomeCheck.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/CheckConditions/BiomeCheck.cs	(date 1581962658844)
+++ Source/CheckConditions/BiomeCheck.cs	(date 1581962658844)
@@ -1,8 +1,7 @@
 using System;
 using System.Collections.Generic;
-using Harmony;
+using HarmonyLib;
 using HumanStoryteller.Incidents;
-using HumanStoryteller.Util;
 using HumanStoryteller.Util.Logging;
 using Verse;
 
Index: Source/CheckConditions/CaravanLocationCheck.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/CheckConditions/CaravanLocationCheck.cs	(date 1581962658849)
+++ Source/CheckConditions/CaravanLocationCheck.cs	(date 1581962658849)
@@ -1,10 +1,7 @@
 using System;
 using System.Collections.Generic;
 using System.Linq;
-using Harmony;
 using HumanStoryteller.Incidents;
-using HumanStoryteller.Util;
-using HumanStoryteller.Util.Logging;
 using RimWorld.Planet;
 using Verse;
 
Index: Source/HumanStoryteller.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/HumanStoryteller.cs	(date 1581959742313)
+++ Source/HumanStoryteller.cs	(date 1581959742313)
@@ -1,7 +1,7 @@
 using System;
 using System.Net;
 using System.Threading;
-using Harmony;
+using HarmonyLib;
 using HumanStoryteller.DebugConnection;
 using HumanStoryteller.Model.StoryPart;
 using HumanStoryteller.Util;
@@ -150,7 +150,7 @@
     [StaticConstructorOnStartup]
     static class HarmonyPatches {
         static HarmonyPatches() {
-            HarmonyInstance harmony = HarmonyInstance.Create("rimworld.keyboxsoftware.humanstoryteller");
+            Harmony harmony = new Harmony("rimworld.keyboxsoftware.humanstoryteller");
 
             Patch.Main_Patch.Patch(harmony);
             Patch.StoryStatus_Patch.Patch(harmony);
Index: Source/HumanStoryteller.csproj
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/HumanStoryteller.csproj	(date 1581959637520)
+++ Source/HumanStoryteller.csproj	(date 1581959637520)
@@ -10,6 +10,7 @@
     <RootNamespace>HumanStoryteller</RootNamespace>
     <AssemblyName>HumanStoryteller</AssemblyName>
     <TargetFrameworkVersion>v4.7.2</TargetFrameworkVersion>
+    <TargetFramework>net472</TargetFramework>
     <FileAlignment>512</FileAlignment>
     <LangVersion>7.3</LangVersion>
   </PropertyGroup>
@@ -34,17 +35,269 @@
   </PropertyGroup>
   <ItemGroup>
     <None Include="packages.config" />
-    <Reference Include="0Harmony, Version=1.2.0.1, Culture=neutral, PublicKeyToken=null">
-      <HintPath>..\Assemblies\0Harmony.dll</HintPath>
+    <Reference Include="0Harmony, Version=2.0.0.1, Culture=neutral, processorArchitecture=MSIL">
+      <HintPath>..\packages\Lib.Harmony.2.0.0.1\lib\net472\0Harmony.dll</HintPath>
+      <Private>True</Private>
     </Reference>
-    <Reference Include="Assembly-CSharp, Culture=neutral, PublicKeyToken=null">
+    <Reference Include="Assembly-CSharp">
       <HintPath>..\..\..\RimWorldWin64_Data\Managed\Assembly-CSharp.dll</HintPath>
       <Private>False</Private>
     </Reference>
-    <Reference Include="Assembly-CSharp-firstpass, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null">
+    <Reference Include="Assembly-CSharp-firstpass">
       <HintPath>..\..\..\RimWorldWin64_Data\Managed\Assembly-CSharp-firstpass.dll</HintPath>
       <Private>False</Private>
     </Reference>
+    <Reference Include="System" />
+    <Reference Include="System.Runtime.InteropServices.RuntimeInformation" />
+    <Reference Include="System.XML" />
+    <Reference Include="Unity.TextMeshPro">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\Unity.TextMeshPro.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.AccessibilityModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.AccessibilityModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.AIModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.AIModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.AndroidJNIModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.AndroidJNIModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.AnimationModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.AnimationModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.ARModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.ARModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.AssetBundleModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.AssetBundleModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.AudioModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.AudioModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.ClothModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.ClothModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.ClusterInputModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.ClusterInputModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.ClusterRendererModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.ClusterRendererModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.CoreModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.CoreModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.CrashReportingModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.CrashReportingModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.DirectorModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.DirectorModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.DSPGraphModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.DSPGraphModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.FileSystemHttpModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.FileSystemHttpModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.GameCenterModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.GameCenterModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.GridModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.GridModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.HotReloadModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.HotReloadModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.ImageConversionModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.ImageConversionModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.IMGUIModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.IMGUIModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.InputLegacyModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.InputLegacyModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.InputModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.InputModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.JSONSerializeModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.JSONSerializeModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.LocalizationModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.LocalizationModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.ParticleSystemModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.ParticleSystemModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.PerformanceReportingModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.PerformanceReportingModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.Physics2DModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.Physics2DModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.PhysicsModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.PhysicsModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.ProfilerModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.ProfilerModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.ScreenCaptureModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.ScreenCaptureModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.SharedInternalsModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.SharedInternalsModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.SpriteMaskModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.SpriteMaskModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.SpriteShapeModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.SpriteShapeModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.StreamingModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.StreamingModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.SubstanceModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.SubstanceModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.TerrainModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.TerrainModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.TerrainPhysicsModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.TerrainPhysicsModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.TextCoreModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.TextCoreModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.TextRenderingModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.TextRenderingModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.TilemapModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.TilemapModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.TLSModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.TLSModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.UI">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.UI.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.UIElementsModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.UIElementsModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.UIModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.UIModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.UmbraModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.UmbraModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.UNETModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.UNETModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.UnityAnalyticsModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.UnityAnalyticsModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.UnityConnectModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.UnityConnectModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.UnityTestProtocolModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.UnityTestProtocolModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.UnityWebRequestAssetBundleModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.UnityWebRequestAssetBundleModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.UnityWebRequestAudioModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.UnityWebRequestAudioModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.UnityWebRequestModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.UnityWebRequestModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.UnityWebRequestTextureModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.UnityWebRequestTextureModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.UnityWebRequestWWWModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.UnityWebRequestWWWModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.VehiclesModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.VehiclesModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.VFXModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.VFXModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.VideoModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.VideoModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.VRModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.VRModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.WindModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.WindModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
+    <Reference Include="UnityEngine.XRModule">
+      <HintPath>..\..\..\RimWorldWin64_Data\Managed\UnityEngine.XRModule.dll</HintPath>
+      <Private>False</Private>
+    </Reference>
     <Reference Include="NAudio, Version=1.7.3.0, Culture=neutral, PublicKeyToken=null">
       <HintPath>..\..\..\RimWorldWin64_Data\Managed\NAudio.dll</HintPath>
       <Private>False</Private>
@@ -589,6 +842,9 @@
   </ItemGroup>
   <ItemGroup>
     <Folder Include="WebSocketsSharp\obj\Debug_Ubuntu\TempPE" />
+  </ItemGroup>
+  <ItemGroup>
+    <PackageReference Include="Lib.Harmony" Version="2.0.0.1" />
   </ItemGroup>
   <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
   <PropertyGroup>
Index: Source/StorytellerCompProperties_HumanThreatCycle.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Source/StorytellerCompProperties_HumanThreatCycle.cs	(date 1581965418164)
+++ Source/StorytellerCompProperties_HumanThreatCycle.cs	(date 1581965418164)
@@ -1,7 +1,7 @@
 using System;
 using System.Collections.Generic;
 using System.Linq;
-using Harmony;
+using HarmonyLib;
 using HumanStoryteller.Incidents;
 using HumanStoryteller.Model.StoryPart;
 using HumanStoryteller.Patch;
@@ -53,6 +53,7 @@
             var seedString = GenText.RandomSeedString();
             var rainfall = OverallRainfall.Normal;
             var temperature = OverallTemperature.Normal;
+            var population = OverallPopulation.Normal;
             var initParams = HumanStoryteller.StoryComponent.Story.StoryGraph.InitParams();
             if (initParams != null && initParams.OverrideMapGen) {
                 if (initParams.Seed != "") {
@@ -71,6 +72,10 @@
                     temperature = CreateWorldUI_Patch.SeverityToTemperature(initParams.Temperature.GetValue());
                 }
 
+                if (initParams.Population.GetValue() != -1) {
+                    population = CreateWorldUI_Patch.SeverityToPopulation(initParams.Population.GetValue());
+                }
+
                 var value = initParams.PawnAmount.GetValue();
                 if (value != -1) {
                     try {
@@ -92,7 +97,7 @@
 
             LongEventHandler.QueueLongEvent(() => {
                 Find.GameInitData.ResetWorldRelatedMapInitData();
-                Current.Game.World = WorldGenerator.GenerateWorld(planetCoverage, seedString, rainfall, temperature);
+                Current.Game.World = WorldGenerator.GenerateWorld(planetCoverage, seedString, rainfall, temperature, population);
                 LongEventHandler.ExecuteWhenFinished(() => {
                     MemoryUtility.UnloadUnusedUnityAssets();
                     AfterWorldGeneration(stageIdentifier, initParams, pageList);
